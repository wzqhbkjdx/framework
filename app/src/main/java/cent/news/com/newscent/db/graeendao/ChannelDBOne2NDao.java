package cent.news.com.newscent.db.graeendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cent.news.com.newscent.news.channel.ChannelDBOne2N;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_DBONE2_N".
*/
public class ChannelDBOne2NDao extends AbstractDao<ChannelDBOne2N, Integer> {

    public static final String TABLENAME = "CHANNEL_DBONE2_N";

    /**
     * Properties of entity ChannelDBOne2N.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, int.class, "dbId", true, "DB_ID");
    }

    private DaoSession daoSession;


    public ChannelDBOne2NDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelDBOne2NDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_DBONE2_N\" (" + //
                "\"DB_ID\" INTEGER PRIMARY KEY NOT NULL );"); // 0: dbId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHANNEL_DBONE2_N_DB_ID ON CHANNEL_DBONE2_N" +
                " (\"DB_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_DBONE2_N\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelDBOne2N entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelDBOne2N entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDbId());
    }

    @Override
    protected final void attachEntity(ChannelDBOne2N entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ChannelDBOne2N readEntity(Cursor cursor, int offset) {
        ChannelDBOne2N entity = new ChannelDBOne2N( //
            cursor.getInt(offset + 0) // dbId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelDBOne2N entity, int offset) {
        entity.setDbId(cursor.getInt(offset + 0));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ChannelDBOne2N entity, long rowId) {
        return entity.getDbId();
    }
    
    @Override
    public Integer getKey(ChannelDBOne2N entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelDBOne2N entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
