package cent.news.com.newscent.db.graeendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import cent.news.com.newscent.news.channel.ChannelDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_DBBEAN".
*/
public class ChannelDBBeanDao extends AbstractDao<ChannelDBBean, Long> {

    public static final String TABLENAME = "CHANNEL_DBBEAN";

    /**
     * Properties of entity ChannelDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ChannelID = new Property(1, int.class, "channelID", false, "CHANNEL_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Attval = new Property(3, int.class, "attval", false, "ATTVAL");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Alias = new Property(5, String.class, "alias", false, "ALIAS");
    }

    private Query<ChannelDBBean> channelDBOne2N_ChannelsQuery;

    public ChannelDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_DBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHANNEL_ID\" INTEGER NOT NULL ," + // 1: channelID
                "\"TITLE\" TEXT," + // 2: title
                "\"ATTVAL\" INTEGER NOT NULL ," + // 3: attval
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"ALIAS\" TEXT);"); // 5: alias
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHANNEL_DBBEAN_CHANNEL_ID ON CHANNEL_DBBEAN" +
                " (\"CHANNEL_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_DBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChannelID());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getAttval());
        stmt.bindLong(5, entity.getType());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(6, alias);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getChannelID());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
        stmt.bindLong(4, entity.getAttval());
        stmt.bindLong(5, entity.getType());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(6, alias);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChannelDBBean readEntity(Cursor cursor, int offset) {
        ChannelDBBean entity = new ChannelDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // channelID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.getInt(offset + 3), // attval
            cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // alias
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelDBBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannelID(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAttval(cursor.getInt(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setAlias(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChannelDBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChannelDBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelDBBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "channels" to-many relationship of ChannelDBOne2N. */
    public List<ChannelDBBean> _queryChannelDBOne2N_Channels(int channelID) {
        synchronized (this) {
            if (channelDBOne2N_ChannelsQuery == null) {
                QueryBuilder<ChannelDBBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChannelID.eq(null));
                channelDBOne2N_ChannelsQuery = queryBuilder.build();
            }
        }
        Query<ChannelDBBean> query = channelDBOne2N_ChannelsQuery.forCurrentThread();
        query.setParameter(0, channelID);
        return query.list();
    }

}
